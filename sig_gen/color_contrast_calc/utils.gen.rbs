# TypeProf 0.12.0

# Classes
module ColorContrastCalc
  module Utils
    MIN_OPACITY: Integer
    MAX_OPACITY: Float
    HSL_UPPER_LIMIT: [Integer, Integer, Integer]
    HEX_RE: Regexp
    extend Hwb

    def self.hex_to_rgb: (untyped hex_code) -> Array[untyped]?
    def self.normalize_hex: (untyped code, ?true prefix) -> String
    def self.rgb_to_hex: (Array[untyped] rgb) -> String
    def self.hsl_to_rgb: ([untyped, Integer, Integer] hsl) -> Array[untyped]
    def self.hue_to_rgb: (untyped m1, untyped m2, untyped h) -> untyped
    def self.hsl_to_hex: (untyped hsl) -> String
    def self.rgb_to_hsl: (Array[untyped]? rgb) -> ([Complex | Float | Integer | Rational, Complex | Float | Integer | Rational, untyped])
    def self.rgb_to_lightness: (Array[untyped]? rgb) -> untyped
    def self.rgb_to_saturation: (Array[untyped]? rgb) -> (Complex | Float | Integer | Rational)
    def self.rgb_to_hue: (Array[untyped]? rgb) -> (Complex | Float | Integer | Rational)
    def self.minmax_with_diff: (Array[untyped]? rgb) { (nil, nil, untyped) -> (Complex | Float | Integer | Rational) } -> (Complex | Float | Integer | Rational)
    def self.hex_to_hsl: (untyped hex_code) -> ([Complex | Float | Integer | Rational, Complex | Float | Integer | Rational, untyped])
    def self.valid_rgb?: (untyped rgb) -> untyped
    def self.valid_hsl?: (untyped hsl) -> untyped
    def self.valid_hex?: (untyped hex_code) -> bool
    def self.same_hex_color?: (untyped hex1, untyped hex2) -> bool
    def self.uppercase?: (untyped str) -> bool

    module Hwb
      HWB_UPPER_LIMIT: [Integer, Integer, Integer]

      private
      def normalize_hwb: (untyped hwb) -> [untyped, untyped, untyped]

      public
      def hwb_to_rgb: (untyped hwb) -> Array[untyped]
      def hwb_to_hex: (untyped hwb) -> untyped
      def rgb_to_hwb: (Array[untyped]? rgb) -> ([Complex | Float | Integer | Rational, untyped, Complex | Float])
      def hex_to_hwb: (untyped hex_code) -> ([Complex | Float | Integer | Rational, untyped, Complex | Float])
      def valid_hwb?: (untyped hwb) -> untyped
    end
  end

  module Rgb
    BLACK: [Integer, Integer, Integer]
    GRAY: [Integer, Integer, Integer]
    WHITE: [Integer, Integer, Integer]
  end
end
